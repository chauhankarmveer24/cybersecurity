#import pyshark#PyShark allows you to read, analyze, and interact with network packet capture (PCAP) files in Python using the tshark backend (which is the command-line version of Wireshark).
from scapy.all import rdpcap
#Scapy is a powerful Python library used for network packet manipulation and analysis. It allows you to create, send, sniff, and dissect network packets in a flexible and easy-to-use manner.
cap = rdpcap("ipv4frags.pcap")

for pkt in cap:
    try:
        print(f"Packet: {pkt.ip.src} -> {pkt.ip.dst}, Protocol: {pkt.transport_layer}")#(source ip address , souce ip destincation,rules used at the transport layer)
    except AttributeError:
        print("no packets")#If the packet does not have an IP layer, it will raise an AttributeError. We can catch this error and continue to the next packet.

'''✅ What it's useful for
This kind of script is helpful in network forensics, intrusion detection, and traffic analysis, such as:

🔎 Investigating network attacks (e.g., scanning, spoofing)

📊 Monitoring network usage (see which devices are talking to which)

🐞 Debugging network issues (track failed or malformed connections)

📁 Extracting protocol-specific data (e.g., only TCP/UDP)

🔐 Detecting anomalies (e.g., unexpected IPs or protocols)

'''